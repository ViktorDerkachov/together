name: Run Checks and Build

on: pull_request

jobs:
  check-commit-message:
    name: Check Commit Message Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Check Commits Has Stand With Ukraine Message
        uses: gsactions/commit-message-checker@v1
        with:
          pattern: '(:ukraine: #StandWithUkraine\s.*)'
          flags: 'gm'
          checkAllCommitMessages: 'true'
          accessToken: ${{ secrets.GITHUB_TOKEN }}
          error: 'Commit messages must conform to `:ukraine: #StandWithUkraine [description in sentence case]` formatting.'
  run:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    name: Lint, Test, and Build on Node.js ${{ matrix.node-version }}
    steps:
      - uses: actions/checkout@master
      - name: Set Up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install Dependencies on Node ${{ matrix.node-version }}
        run: npm install
      - name: Check Linter on Node ${{ matrix.node-version }}
        run: npm next lint
      - name: Build on Node ${{ matrix.node-version }}
        run: npm run build
uses: actions/cache@v2
with:
  # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
  path: |
    ~/.npm
    ${{ github.workspace }}/.next/cache
  # Generate a new cache whenever packages or source files change.
  key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
  # If source files changed but packages didn't, rebuild from a prior cache.
  restore-keys: |
    ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
